import type { NextPage } from 'next'
import Head from 'next/head'
import { useRef, useState } from 'react'
import shortUUID from 'short-uuid'
import { Main } from '../components/Primitives'

const short = shortUUID()

const Home: NextPage = () => {
  const text = useRef<HTMLInputElement>(null!)
  const [options, setOptions] = useState<{ id: string; option: string }[]>([
    { id: "imspecial", option: '' },
  ])

  return (
    <Main>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-2xl sm:text-3xl font-extrabold text-slate-900 tracking-tight dark:text-slate-200">
        StrawPoll
      </h1>

      <div className="mb-2">
        <label
          htmlFor="first_name"
          className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">
          A question..
        </label>
        <input
          type="text"
          id="first_name"
          className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 outline-none"
          autoComplete="off"
          placeholder="Cats vs Dogs"
          required
          ref={text}
        />
      </div>

      <div className="flex flex-col gap-2">
        <h2 className="text-lg sm:text-2xl font-extrabold text-slate-900 tracking-tight dark:text-slate-200 text-left">
          Options
        </h2>
        {options.map((option, index) => (
          <input
            type="text"
            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 outline-none"
            autoComplete="off"
            placeholder="Cats!"
            key={option.id}
            required
            onChangeCapture={e => {
              if (index === options.length - 1) {
                setOptions(options => [
                  ...options,
                  {
                    id: short.new(),
                    option: '',
                  },
                ])
              } else if (
                index === options.length - 2 &&
                (e.target as HTMLInputElement).value.length === 0
              ) {
                setOptions(options => options.filter((_, i) => index + 1 > i))
              } else {
                setOptions(options => {
                  const copy = options.slice()
                  copy[index] = {
                    ...copy[index],
                    option: (e.target as HTMLInputElement).value,
                  }
                  return copy
                })
              }
            }}
            onBlurCapture={e => {
              if (e.target.value.length === 0 && index !== options.length - 1) {
                setOptions(options => options.filter(v => v.id !== option.id))
              }
            }}
          />
        ))}
      </div>
    </Main>
  )
}

export default Home
